{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Cards/Cards.js","components/GameContainer/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Cards","props","key","id","onClick","handleClick","clicked","src","image","alt","name","GameContainer","state","images","message","score","topScore","imageOrder","forEach","index","setState","sort","Math","random","newScore","newTopScore","this","map","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"y6EAaeA,G,YATG,kBAClB,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,yBACb,iDACA,6G,4BCSWC,G,MAdD,SAAAC,GAAK,OACf,yBACAF,UAAU,wDACVG,IAAKD,EAAME,GACXC,QAAS,kBAAKH,EAAMI,YAAYJ,EAAME,GAAIF,EAAMK,WAE5C,yBACAH,GAAIF,EAAME,GACVI,IAAKN,EAAMO,MACXC,IAAKR,EAAMS,U,eCiEJC,E,4MAvEXC,MAAQ,CACJC,SACAC,QAAS,2BACTC,MAAO,EACPC,SAAU,G,EAGdX,YAAc,SAACF,EAAIG,GAEf,IAAMW,EAAa,EAAKL,MAAMC,OAE9B,GAAIP,EAIA,OAHAW,EAAWC,SAAQ,SAACV,EAAOW,GACvBF,EAAWE,GAAOb,SAAU,KAEzB,EAAKc,SAAS,CACjBZ,MAAOS,EAAWI,MAAK,kBAAMC,KAAKC,SAAW,MAC7CT,QAAS,2BACTC,MAAO,IAGXE,EAAWC,SAAQ,SAACV,EAAOW,GACnBhB,IAAOK,EAAML,KACbc,EAAWE,GAAOb,SAAU,MAHjC,MAOyB,EAAKM,MAAzBI,EAPL,EAOKA,SACFQ,EARH,EAOeT,MACO,EACnBU,EAAcD,EAAWR,EAAWQ,EAAWR,EAErD,OAAO,EAAKI,SAAS,CACjBZ,MAAOS,EAAWI,MAAK,kBAAMC,KAAKC,SAAW,MAC7CT,QAAS,yBACTC,MAAOS,EACPR,SAAUS,K,uDAKZ,IAAD,OACL,OACI,yBAAK1B,UAAU,gCACX,yBAAKA,UAAU,2BACX,2BAAI2B,KAAKd,MAAME,UAGnB,yBAAKf,UAAU,0BACX,qCAAW2B,KAAKd,MAAMG,MAAtB,iBAA2CW,KAAKd,MAAMI,WAG1D,yBAAKjB,UAAU,aAEX,yBAAKA,UAAU,OACV2B,KAAKd,MAAMC,OAAOc,KAAI,SAAAnB,GAAK,OACxB,kBAAC,EAAD,CACIN,IAAKM,EAAML,GACXA,GAAIK,EAAML,GACVO,KAAMF,EAAME,KACZJ,QAASE,EAAMF,QACfE,MAAOA,EAAMA,MACbH,YAAa,EAAKA,wB,GA9DtBuB,aCQbC,G,MAPH,kBACV,yBAAK9B,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCGgB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,c","file":"static/js/main.2961a10b.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Jumbotron.css\";\n\n\nconst Jumbotron = () => (\n<div className=\"jumbotron jumbotron-fluid\">\n  <div className=\"container text-center\">\n    <h1>React Clicky Game</h1>\n    <p>Click on any image to earn points, but don't click on them more than once!</p>\n  </div>\n</div>\n);\n\nexport default Jumbotron;","import React from 'react';\nimport \"./Cards.css\";\n\nconst Cards = props => (\n    <div \n    className=\"allCards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\"\n    key={props.id}\n    onClick={()=> props.handleClick(props.id, props.clicked)}\n    >\n        <img\n        id={props.id}\n        src={props.image}\n        alt={props.name}\n        />\n    </div>\n);\n\nexport default Cards;","import React, { Component } from 'react';\nimport Cards from '../Cards';\nimport \"./GameContainer.css\";\nimport images from \"../../images.json\";\n\nclass GameContainer extends Component {\n    state = {\n        images,\n        message: \"Click an image to begin.\",\n        score: 0,\n        topScore: 0\n    };\n\n    handleClick = (id, clicked) => {\n\n        const imageOrder = this.state.images;\n\n        if (clicked) {\n            imageOrder.forEach((image, index) => {\n                imageOrder[index].clicked = false;\n            });\n            return this.setState({\n                image: imageOrder.sort(() => Math.random() - 0.5),\n                message: \"You guessed incorrectly!\",\n                score: 0\n            });\n        } else {\n            imageOrder.forEach((image, index) => {\n                if (id === image.id) {\n                    imageOrder[index].clicked = true;\n                }\n            });\n\n            const { topScore, score } = this.state;\n            const newScore = score + 1;\n            const newTopScore = newScore > topScore ? newScore : topScore;\n\n            return this.setState({\n                image: imageOrder.sort(() => Math.random() - 0.5),\n                message: \"You guessed correctly!\",\n                score: newScore,\n                topScore: newTopScore\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"conainer-fluid gameContainer\">\n                <div className=\"gameMessage text-center\">\n                    <p>{this.state.message}</p>\n                </div>\n\n                <div className=\"gameScores text-center\">\n                    <p>Score: {this.state.score} | Top Score: {this.state.topScore}</p>\n                </div>\n\n                <div className=\"container\">\n\n                    <div className=\"row\">\n                        {this.state.images.map(image => (\n                            <Cards\n                                key={image.id}\n                                id={image.id}\n                                name={image.name}\n                                clicked={image.clicked}\n                                image={image.image}\n                                handleClick={this.handleClick}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GameContainer;","import React from 'react';\nimport Jumbotron from \"./components/Jumbotron\";\nimport GameContainer from \"./components/GameContainer\"\n//import logo from './logo.svg';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"container-fluid\">\n    <Jumbotron />\n    <GameContainer />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}